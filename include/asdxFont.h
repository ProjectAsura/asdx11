//-------------------------------------------------------------------------------------------------
// File : asdxFont.h
// Desc : Font Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <asdxMath.h>
#include <asdxRef.h>
#include <asdxSprite.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////////////////////////
// Font class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Font
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // private methods.
    //=============================================================================================
    /* NOTHING */

protected:
    //=============================================================================================
    // protected variables.
    //=============================================================================================
    static const size_t NUM_SPRITES = 2048;            //!< 最大スプライト数です.
    RefPtr<ID3D11Texture2D>            m_pTexture;     //!< テクスチャです.
    RefPtr<ID3D11ShaderResourceView>   m_pSRV;         //!< シェーダリソースビューです.

    uint32_t            m_FontWidth;                //!< フォントの横幅です.
    uint32_t            m_FontHeight;               //!< フォントの縦幅です.
    wchar_t             m_FontName[ 32 ];           //!< フォント名です.
    float               m_OffsetU;                  //!< U方向のオフセットです.
    float               m_OffsetV;                  //!< V方向のオフセットです.
    char                m_Buffer[ NUM_SPRITES ];    //!< 文字列バッファです.
 
    //=============================================================================================
    // protected methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Font();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~Font();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理です.
    //!
    //! @param [in]     pDevice         デバイスです.
    //! @param [in]     filename        フォントバイナリファイル名です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool Init( ID3D11Device* pDevice, const wchar_t* filename );

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理です.
    //!
    //! @param [in]     pDevice         デバイスです.
    //! @param [in]     pBinary         フォントバイナリです.
    //! @param [in]     binarySize      フォントバイナリのサイズです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool Init( ID3D11Device* pDevice, const uint8_t* pBinary, const uint32_t binarySize );

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理です.
    //---------------------------------------------------------------------------------------------
    void Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      フォントの横幅を設定します.
    //!
    //! @param [in]     width       フォントの横幅.
    //---------------------------------------------------------------------------------------------
    void SetFontWidth( uint32_t width );

    //---------------------------------------------------------------------------------------------
    //! @brief      フォントの縦幅を設定します.
    //!
    //! @param [in]     height      フォントの縦幅.
    //---------------------------------------------------------------------------------------------
    void SetFontHeight( uint32_t height );

    //---------------------------------------------------------------------------------------------
    //! @brief      描画を開始します.
    //!
    //! @parma[in]      pDeviceContext      デバイスコンテキストです.
    //! @param[in]      isMultiSample       マルチサンプルかどうか.
    //---------------------------------------------------------------------------------------------
    void Begin( ID3D11DeviceContext* pDeviceContext, asdx::Sprite& sprite );

    //---------------------------------------------------------------------------------------------
    //! @brief      文字列を描画します.
    //!
    //! @param [in]     x       描画開始X座標.
    //! @param [in]     y       描画開始Y座標.
    //! @param [in]     text    描画するテキスト.
    //---------------------------------------------------------------------------------------------
    void DrawString( asdx::Sprite& sprite, const int x, const int y, const char* text );

    //---------------------------------------------------------------------------------------------
    //! @brief      文字列を描画します.
    //!
    //! @param [in]     x           描画開始X座標.
    //! @param [in]     y           描画開始Y座標.
    //! @param [in]     layerDepth  レイヤーの深さ.
    //! @param [in]     text        描画するテキスト.
    //---------------------------------------------------------------------------------------------
    void DrawString( asdx::Sprite& sprite, const int x, const int y, const int layerDepth, const char* text );

    //---------------------------------------------------------------------------------------------
    //! @brief      文字列を描画します.
    //!
    //! @param [in]     x           描画開始X座標.
    //! @param [in]     y           描画開始Y座標.
    //! @param [in]     format      書式指定子.
    //! @param [in]     ...         可変引数.
    //---------------------------------------------------------------------------------------------
    void DrawStringArg( asdx::Sprite& sprite, const int x, const int y, const char* format, ... );

    //---------------------------------------------------------------------------------------------
    //! @brief      文字列を描画します.
    //!
    //! @param [in]     x           描画開始X座標.
    //! @param [in]     y           描画開始Y座標.
    //! @param [in]     layerDepth  レイヤーの深さ.
    //! @param [in]     format      書式指定子.
    //! @param [in]     ...         可変引数.
    //---------------------------------------------------------------------------------------------
    void DrawStringArg( asdx::Sprite& sprite, const int x, const int y, const int layerDepth, const char* format, ... );

    //---------------------------------------------------------------------------------------------
    //! @brief      描画終了処理です.
    //!
    //! @param [in]     pDeviceContext      デバイスコンテキスト.
    //---------------------------------------------------------------------------------------------
    void End( ID3D11DeviceContext* pDeviceContext, asdx::Sprite& sprite );

    //---------------------------------------------------------------------------------------------
    //! @brief      フォントの横幅を取得します.
    //!
    //! @return     フォントの横幅を返却します.
    //---------------------------------------------------------------------------------------------
    uint32_t GetFontWidth () const;

    //---------------------------------------------------------------------------------------------
    //! @brief      フォントの縦幅を取得します.
    //!
    //! @return     フォントの縦幅を返却します.
    //---------------------------------------------------------------------------------------------
    uint32_t GetFontHeight() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      フォント名を取得します.
    //!
    //! @return     フォント名を返却します.
    //---------------------------------------------------------------------------------------------
    const wchar_t* GetFontName() const;
};

} // namespace asdx
