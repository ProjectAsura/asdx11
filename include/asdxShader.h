//-----------------------------------------------------------------------------
// File : ShaderSet.h
// Desc : Shader Set Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <map>
#include <vector>
#include <d3d11.h>
#include <d3d11shader.h>
#include <d3dcompiler.h>
#include <asdxRef.h>
#include <asdxMath.h>


//-----------------------------------------------------------------------------
// Linker
//-----------------------------------------------------------------------------
#ifdef ASDX_AUTO_LINK
#pragma comment(lib, "d3dcompiler.lib")
#endif//ASDX_AUTO_LINK

//-----------------------------------------------------------------------------
// Macros
//-----------------------------------------------------------------------------
#define ASDX_SHADER_BIN(x)        x, sizeof(x)


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// BufferParam structure
///////////////////////////////////////////////////////////////////////////////
struct BufferParam
{
    uint32_t    Offset;
    uint32_t    Size;
};

///////////////////////////////////////////////////////////////////////////////
// ShaderCBV class
///////////////////////////////////////////////////////////////////////////////
class ShaderCBV
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ShaderCBV();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~ShaderCBV();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, ID3D11ShaderReflectionConstantBuffer* pReflection);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      指定された名前のパラメータが含まれるかどうかチェックします.
    //!
    //! @retval true    指定された名前のパラメータが存在します.
    //! @retval false   指定された名前のパラメータは存在しません.
    //-------------------------------------------------------------------------
    bool Contain(const char* name) const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを設定します.
    //!
    //! @param[in]      name        パラメータ名.
    //! @param[in]      ptr         書き込みデータ.
    //! @param[in]      size        書き込みサイズ.
    //! @retval true    設定に成功.
    //! @retval false   設定に失敗.
    //-------------------------------------------------------------------------
    bool SetParam(const char* name, const void* ptr, size_t size);

    //-------------------------------------------------------------------------
    //! @brief      パラメータを設定します.
    //!
    //! @param[in]      name        パラメータ名.
    //! @param[in]      value       設定値.
    //! @retval true    設定に成功.
    //! @retval false   設定に失敗.
    //-------------------------------------------------------------------------
    template<typename T>
    bool SetParam(const char* name, const T& value)
    { return SetParam(name, &value, sizeof(T)); }

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //!
    //! @param[in]      name        パラメータ名.
    //! @param[out]     ptr         書き込み先.
    //! @param[in]      size        想定サイズ.
    //! @retval true    取得に成功.
    //! @retval false   取得に失敗.
    //-------------------------------------------------------------------------
    bool GetParam(const char* name, void* ptr, size_t size) const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //!
    //! @param[in]      name        パラメータ名.
    //! @param[out]     value       格納先.
    //! @retval true    取得に成功.
    //! @retval false   取得に失敗.
    //-------------------------------------------------------------------------
    template<typename T>
    bool GetParam(const char* name, T& value) const
    { return GetParam(name, &value, sizeof(T)); }

    //-------------------------------------------------------------------------
    //! @brief      サブリソースを更新します.
    //!
    //! @param[in]      pContext        デバイスコンテキスト.
    //-------------------------------------------------------------------------
    void UpdateSubresource(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バッファを取得します.
    //!
    //! @return     バッファを返却します.
    //-------------------------------------------------------------------------
    ID3D11Buffer* GetPtr() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11Buffer>              m_CB;           //!< 定数バッファ.
    std::map<std::string, BufferParam>      m_ParamMap;     //!< パラメータマップ.
    std::vector<uint8_t>                    m_Memory;       //!< バッファメモリ.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// VertexShader class
///////////////////////////////////////////////////////////////////////////////
class VertexShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    VertexShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~VertexShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const uint8_t*  pBinary,
        size_t          binarySize,
        uint32_t        elementCount,
        const D3D11_INPUT_ELEMENT_DESC* pElements);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const wchar_t*  path,
        const char*     entryPoint,
        const char*     shaderModel,
        uint32_t        elementCount,
        const D3D11_INPUT_ELEMENT_DESC* pElements);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const char*     sourceCode,
        size_t          sourceCodSize,
        const char*     entryPoint,
        const char*     shaderModel,
        uint32_t        elementCount,
        const D3D11_INPUT_ELEMENT_DESC* pElements);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      シェーダリフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11VertexShader>        m_VS;
    asdx::RefPtr<ID3D11InputLayout>         m_IL;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// PixelShader class
///////////////////////////////////////////////////////////////////////////////
class PixelShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    PixelShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~PixelShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, const uint8_t* pBinary, size_t binarySize);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const wchar_t*  path,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const char*     sourceCode,
        size_t          sourceCodeSize,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      リフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11PixelShader>         m_PS;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// GeometryShader class
///////////////////////////////////////////////////////////////////////////////
class GeometryShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    GeometryShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~GeometryShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, const uint8_t* pBinary, size_t binarySize);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const wchar_t*  path,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const char*     sourceCode,
        size_t          sourceCodeSize,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      リフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11GeometryShader>      m_GS;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;
};


///////////////////////////////////////////////////////////////////////////////
// DomainShader class
///////////////////////////////////////////////////////////////////////////////
class DomainShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    DomainShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~DomainShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, const uint8_t* pBinary, size_t binarySize);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const wchar_t*  path,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const char*     sourceCode,
        size_t          sourceCodeSize,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      リフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11DomainShader>        m_DS;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;
};

///////////////////////////////////////////////////////////////////////////////
// HullShader class
///////////////////////////////////////////////////////////////////////////////
class HullShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    HullShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~HullShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, const uint8_t* pBinary, size_t binarySize);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const wchar_t*  path,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const char*     sourceCode,
        size_t          sourceCodeSize,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      リフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11HullShader>          m_HS;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;
};

///////////////////////////////////////////////////////////////////////////////
// ComputeShader class
///////////////////////////////////////////////////////////////////////////////
class ComputeShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ComputeShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~ComputeShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, const uint8_t* pBinary, size_t binarySize);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const wchar_t*  path,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      ソースコードから初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const char*     sourceCode,
        size_t          sourceCodeSize,
        const char*     entryPoint,
        const char*     shaderModel);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      ディスパッチします.
    //-------------------------------------------------------------------------
    void Dispatch(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      リフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11ComputeShader>       m_CS;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;
    uint32_t                                m_ThreadX;
    uint32_t                                m_ThreadY;
    uint32_t                                m_ThreadZ;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx