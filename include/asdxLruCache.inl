//-------------------------------------------------------------------------------------------------
// File : asdxLruCache.inl
// Desc : Least Recently Used Cache Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once


namespace asdx {

///////////////////////////////////////////////////////////////////////////////////////////////////
// LruCache class
///////////////////////////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------------------------------
//      コンストラクタです.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
LruCache<T>::LruCache(size_t capacity)
: m_Cache()
, m_Capacity(capacity)
{ /* DO_NOTHING */ }

//-------------------------------------------------------------------------------------------------
//      デストラクタです.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
LruCache<T>::~LruCache()
{ Clear(); }

//-------------------------------------------------------------------------------------------------
//      要素を追加します.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
void LruCache<T>::Add(T* item)
{
    if ( Contains(item) )
    {
        m_Cache.Remove(item);
        m_Cache.PushBack(item);
    }
    else if ( m_Cache.size() < m_Capacity )
    {
        m_Cache.PushBack(item);
    }
    else
    {
        m_Cache.PopFront();
        m_Cache.PushBack(item);
    }
}

//-------------------------------------------------------------------------------------------------
//      要素を削除します.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
void LruCache<T>::Remove(T* item)
{ m_Cache.Remove(item); }

//-------------------------------------------------------------------------------------------------
//      全要素を削除します.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
void LruCache<T>::Clear()
{ m_Cache.Clear(); }

//-------------------------------------------------------------------------------------------------
//      要素が含まれているか判定します.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
bool LruCache<T>::Contains(T* item) const
{
    auto itr = m_Cache.GetHead();
    while(itr != nullptr)
    {
        if (itr == item)
        { return true; }

        itr = itr->GetNext();
    }
    return false;
}

//-------------------------------------------------------------------------------------------------
//      配列にコピーします.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
void LruCache<T>::Copy(T* pArray, size_t offset) const
{
    auto itr = m_Cache.GetHead();
    while(itr != nullptr)
    {
        pArray[offset] = itr;
        offset++;
        itr = itr->GetNext();
    }
}

//-------------------------------------------------------------------------------------------------
//      最大収容可能数を取得します.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
size_t LruCache<T>::GetCapacity() const
{ return m_Capacity; }

//-------------------------------------------------------------------------------------------------
//      現在の収容数を取得します.
//--------------------------------------------------------------------------------------------------
template<typename T> inline
size_t LruCache<T>::GetCount() const
{ return m_Cache.GetCount(); }

//-------------------------------------------------------------------------------------------------
//      先頭要素を取得します.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
T* LruCache<T>::GetHead() const
{ return m_Cache.GetHead(); }

//-------------------------------------------------------------------------------------------------
//      末尾要素を取得します.
//-------------------------------------------------------------------------------------------------
template<typename T> inline
T* LruCache<T>::GetTail() const
{ return m_Cache.GetTail(); }

} // namespace asdx
