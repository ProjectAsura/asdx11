//-----------------------------------------------------------------------------
// File : ShaderSet.h
// Desc : Shader Set Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <map>
#include <d3d11.h>
#include <d3d11shader.h>
#include <d3dcompiler.h>
#include <asdxRef.h>


//-----------------------------------------------------------------------------
// Linker
//-----------------------------------------------------------------------------
#ifdef ASDX_AUTO_LINK
#pragma comment(lib, "d3dcompiler.lib")
#endif//ASDX_AUTO_LINK

//-----------------------------------------------------------------------------
// Macros
//-----------------------------------------------------------------------------
#define ASDX_SHADER_BIN(x)        x, sizeof(x)


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// VertexShader class
///////////////////////////////////////////////////////////////////////////////
class VertexShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    VertexShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~VertexShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D11Device*   pDevice,
        const uint8_t*  pBinary,
        size_t          binarySize,
        uint32_t        elementCount,
        const D3D11_INPUT_ELEMENT_DESC* pElements);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      シェーダリフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11VertexShader>        m_VS;
    asdx::RefPtr<ID3D11InputLayout>         m_IL;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// PixelShader class
///////////////////////////////////////////////////////////////////////////////
class PixelShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    PixelShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~PixelShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, const uint8_t* pBinary, size_t binarySize);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      リフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11PixelShader>         m_PS;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// ComputeShader class
///////////////////////////////////////////////////////////////////////////////
class ComputeShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ComputeShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~ComputeShader();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, const uint8_t* pBinary, size_t binarySize);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      バインドします.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バインドを解除します.
    //-------------------------------------------------------------------------
    void UnBind(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      ディスパッチします.
    //-------------------------------------------------------------------------
    void Dispatch(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      リフレクションを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderReflection* GetReflection() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11ComputeShader>       m_CS;
    asdx::RefPtr<ID3D11ShaderReflection>    m_Reflection;
    uint32_t                                m_ThreadX;
    uint32_t                                m_ThreadY;
    uint32_t                                m_ThreadZ;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx