//-----------------------------------------------------------------------------
// File : asdxSpriteSystem
// Desc : Sprite Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <asdxMath.h>
#include <asdxRef.h>
#include <asdxPipelineState.h>
#include <vector>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// SpriteSystem class
///////////////////////////////////////////////////////////////////////////////
class SpriteSystem
{
    //=========================================================================
    // list of friend classed and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      シングルトンインスタンスを取得します.
    //! 
    //! @return     シングルトンインスタンスを返却します.
    //-------------------------------------------------------------------------
    static SpriteSystem& Instance();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice     デバイスです.
    //! @param[in]      w           スクリーンの横幅です.
    //! @param[in]      h           スクリーンの縦幅です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(ID3D11Device* pDevice, float w, float h);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      描画開始処理を行います.
    //-------------------------------------------------------------------------
    void Reset();

    //-------------------------------------------------------------------------
    //! @brief      シェーダリソースビューを設定します.
    //! 
    //! @param[in]      pSRV            設定するシェーダリソースビュー.
    //-------------------------------------------------------------------------
    void SetSRV(ID3D11ShaderResourceView* pSRV);

    //-------------------------------------------------------------------------
    //! @brief      頂点カラーを設定します.
    //!
    //! @param[in]      r           R成分です.
    //! @param[in]      g           G成分です.
    //! @param[in]      b           B成分です.
    //! @param[in]      a           A成分です.
    //-------------------------------------------------------------------------
    void SetColor(float r, float g, float b, float a);

    //-------------------------------------------------------------------------
    //! @brief      頂点カラーを設定します.
    //!
    //! @param[in]      r           R成分です.
    //! @param[in]      g           G成分です.
    //! @param[in]      b           B成分です.
    //! @param[in]      a           A成分です.
    //-------------------------------------------------------------------------
    void SetColor(uint8_t r, uint8_t g, uint8_t b, uint8_t a);

    //-------------------------------------------------------------------------
    //! @brief      スクリーンサイズを設定します.
    //!
    //! @param[in]      width       スクリーンの横幅です.
    //! @param[in]      height      スクリーンの縦幅です.
    //-------------------------------------------------------------------------
    void SetScreenSize(float w, float h);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //! @param[in]      uv0         左上のUV座標です.
    //! @param[in]      uv1         右下のUV座標です.
    //! @param[in]      layer       レイヤーです(Z座標).
    //-------------------------------------------------------------------------
    void Draw(
        int x,
        int y,
        int w,
        int h,
        const asdx::Vector2& uv0 = asdx::Vector2(0.0f, 0.0f),
        const asdx::Vector2& uv1 = asdx::Vector2(1.0f, 1.0f),
        int layer = 0);

    //-------------------------------------------------------------------------
    //! @brief      描画終了処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //-------------------------------------------------------------------------
    void Submit(ID3D11DeviceContext* pDeviceContext);

    //-------------------------------------------------------------------------
    //! @brief      スクリーンサイズを取得します.
    //!
    //! @return     設定されているスクリーンサイズを返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector2& GetScreenSize() const;

    //-------------------------------------------------------------------------
    //! @brief      頂点カラーを取得します.
    //!
    //! @return     設定されている頂点カラーを返却します.
    //-------------------------------------------------------------------------
    asdx::Vector4 GetColor() const;

private:
    ///////////////////////////////////////////////////////////////////////////
    // Unorm4 structure
    ///////////////////////////////////////////////////////////////////////////
    struct Unorm4
    {
        uint8_t r;
        uint8_t g;
        uint8_t b;
        uint8_t a;
    };

    ///////////////////////////////////////////////////////////////////////////
    // Vertex structure
    ///////////////////////////////////////////////////////////////////////////
    struct Vertex
    {
        asdx::Vector3 Position;     //!< 位置座標です.
        asdx::Vector2 TexCoord;     //!< テクスチャ座標です.
        Unorm4        Color;        //!< 頂点カラーです.
    };

    ///////////////////////////////////////////////////////////////////////////
    // Batch structure
    ///////////////////////////////////////////////////////////////////////////
    struct Batch
    {
        uint32_t                    IndexCount;
        uint32_t                    IndexOffset;
        ID3D11ShaderResourceView*   pSRV;
    };

    //=========================================================================
    // private variables.
    //=========================================================================
    static SpriteSystem                 s_Instance;
    asdx::RefPtr<ID3D11Buffer>          m_pVB;
    asdx::RefPtr<ID3D11Buffer>          m_pIB;
    asdx::RefPtr<ID3D11Buffer>          m_pCB;
    asdx::GraphicsPipelineState         m_PSO;
    asdx::RefPtr<ID3D11SamplerState>    m_pSmp;
    ID3D11ShaderResourceView*           m_pSRV = nullptr;

    uint32_t            m_SpriteCount   = 0;
    uint32_t            m_BatchCount    = 0;
    uint32_t            m_SubmitCount   = 0;
    asdx::Vector2       m_ScreenSize    = asdx::Vector2(1920, 1080);
    Unorm4              m_Color         = {255, 255, 255, 255};
    asdx::Matrix        m_Transform     = asdx::Matrix::CreateIdentity();
    std::vector<Vertex> m_Vertices;
    std::vector<Batch>  m_Batches;

    //=========================================================================
    // private methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    SpriteSystem();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~SpriteSystem();

    SpriteSystem              (const SpriteSystem&) = delete;
    SpriteSystem& operator =  (const SpriteSystem&) = delete;
};

} // namespace asdx